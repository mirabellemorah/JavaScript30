mhmmm... I'm trying to do something complicated I guess.
I just want to play symphony for myself which should be relatively simple.
This keycode website is what I use to get the keycodes: https://www.toptal.com/developers/keycode

I've got this. I'll finish this before I leave this library. I properly started 
at about 11am. It's 1pm now. I paused for a while and went about the library.

Oh yeah always remember <kbd>S</kbd> is an inline element

New lessons

In JavaScript, backticks (`` ) are used to create template literals (also called template strings). 
They were introduced in ES6 (ECMAScript 2015) and provide several useful features:

Multi-line strings:

// With backticks
let multiLine = `
  This is a
  multi-line
  string
`;

// Without backticks (old way)
let oldWay = "This is a\n" +
  "multi-line\n" +
  "string";


***

String interpolation (embedding expressions):

let name = "John";
let age = 30;

// With backticks
let text = `Hello, my name is ${name} and I'm ${age} years old`;

// Without backticks (old way)
let oldText = "Hello, my name is " + name + " and I'm " + age + " years old";

***

Expression evaluation inside ${...}:

let a = 5;
let b = 10;
console.log(`Sum: ${a + b}`); // Output: Sum: 15
console.log(`${a} times ${b} is ${a * b}`); // Output: 5 times 10 is 50

***

Nested templates:

const nested = `${`Hello ${`World`}`}`;

***

Tagged templates 

function myTag(strings, ...values) {
    // Custom string processing
    return "Something";
}

let result = myTag`Hello ${name}!`;


Challenges
_______

While using https://www.toptal.com/developers/keycode was great. I ran into an unexpected challenge.
I don't know it was woroking at first then stopped working for reasons unknown to me.
Apparently keycodes have been depercated. 

It's taken me about 4 hours to build this now following the tutorials. I have to go back
and understand more about the javascript I just wrote

L L K : /G H J K : J G A K H 

###############################################################

Day 2
Oh God I don't even understand what is going on with the clock thing. It's working but I don't get the full
logic behind these things. 

###############################################################

Day 3

What's learned:

-webkit- is a browser prefix used to style elements in WebKit-based browsers like Google Chrome, Safari, and newer versions of Edge.

ðŸ”¹ Some CSS properties arenâ€™t fully standardized, so browsers add their own versions using prefixes like:

-webkit- â†’ for Chrome, Safari
-moz- â†’ for Firefox
-ms- â†’ for Internet Explorer / Edge (old versions)

ðŸ‘‰ -webkit-appearance: none; removes the default browser styles for sliders, buttons, 
and form elements in WebKit browsers.

Is appearance a Property Name?
Yes! appearance is a CSS property that controls how an element looks based on the browserâ€™s default UI style.

How appearance Works:
appearance: none; â†’ Removes default browser styling.
appearance: button; â†’ Makes an element look like a button.
appearance: textfield; â†’ Makes an element look like a text input.
ðŸ‘‰ When we use appearance: none;, we disable the browserâ€™s built-in styles so we can customize the element fully.

Difference Between appearance and visibility
Property	What It Does	Example
appearance	Controls whether an element looks like a default UI component (button, text field, etc.)	appearance: none; removes default styles
visibility	Controls whether an element is visible or hidden (but still takes up space)	visibility: hidden; hides the element but keeps its space

.hidden-element {
    visibility: hidden; /* The element is invisible but still exists */
}

.hidden-element {
    display: none; /* The element is removed from the layout */
}

ðŸ”¥ TL;DR
-webkit- is a browser prefix needed for Chrome & Safari.
appearance is a CSS property that controls how UI elements look.
visibility controls whether something is seen or hidden, but it still takes up space.
If you want to completely remove an element, use display: none; instead of visibility: hidden;


###############################################################

Day 5

The selector .panel > * applies styles to all direct children of an element with the class .panel.